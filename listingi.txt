// listing 1
public void run() {
    (...)

    // pobierz konfiguracje przekierowan z bazy danych
    List<UrlMappingReadDto> mappingList = 
        urlMappingService.findAll();

    // wystaw adresy do nasluchu
    for (UrlMappingReadDto mapping : mappingList) {
        addRouting(mapping);
    }

    (...)
}

// listing 2
@Override
public void addRouting(UrlMappingReadDto mapping) {

    PublishEndpointDto endpoint = mapping.getEndpoint();
    if (RequestMethod.GET.equals(endpoint.getMethod())) {
        String methodUrl = endpoint.getMethodUrl();
        service.get(methodUrl, route);
    }
    if (RequestMethod.POST.equals(endpoint.getMethod())) {
        String methodUrl = endpoint.getMethodUrl();
        service.post(methodUrl, route);
    }
}

// listing 3
@Override
public Object handle(Request request, Response resp) throws Exception {

    // Okresl metode HTTP dla adresu do nasluchu
    String reqMethod = request.requestMethod();
    RequestMethod method = RequestMethod.valueOf(reqMethod);
    String requestURI = request.uri();

    // znajdz konfiguracje mapowania w bazie danych
    Optional<UrlMappingReadDto> toPublish =
            mappingService.findByPublishUrlAndPublishMethod(
                    requestURI, method);

    if (!toPublish.isPresent()) {
        return "Nie znaleziono konfiguracji";
    }

    // okresl strategie postepowania dla konfiguracji z bazy
    UrlMappingReadDto urlMapping = toPublish.get();
    String strategyKey = httpKeyGenerator.genreate(urlMapping);

    TargetMethodManager manager = strategyMap.get(strategyKey);
    HttpServletRequest reqRaw = request.raw();
    HttpServletResponse respRaw = resp.raw();
    return manager.manage(urlMapping, reqRaw, respRaw);
}

// listing 4
@Override
public Object manage(
        UrlMappingReadDto urlMapping,
        HttpServletRequest request,
        HttpServletResponse response) {
    (...)
    // uzyskaj adres docelowy
    TargetEndpointDto target = urlMapping.getTarget();
    String fullUrl = target.getFullUrl();
    GetRequest getRequest = Unirest.get(fullUrl);

    // 1. przepisz query param URL do nowego zapytania
    Map<String, String[]> paramMap = request.getParameterMap();
    for (Map.Entry<String, String[]> item : paramMap.entrySet()) {
        String key = item.getKey();
        String value = item.getValue()[0];
        getRequest = getRequest.queryString(key, value);
    }

    // 2. przepisz dane z naglowka do nowego zapytania
    Map<String, String> headerMap =
            HttpServletRequestUtil.getHeaderAsMap(request);

    for (Map.Entry<String, String> item : headerMap.entrySet()) {
        String key = item.getKey();
        String value = item.getValue();

        // podmien wartosc naglowkowa HOST
        if("Host".equals(key)) {
            @NonNull String address = target.getHostAddress();
            value = address.replace("http://", "");
        }
        getRequest = getRequest.header(key, value);
    }

    // wykonaj zapytanie na adres docelowy
    HttpResponse<String> httpResponse = getRequest.asString();
    message = httpResponse.getBody();

    // wykonaj skrypty POST_CALL
    Long urlMappingId = urlMapping.getUrlMappingId();
    message = scriptService.executeScripts(
            urlMappingId, message, ScriptType.POST_CALL);
    (...)
}

// listing 5
public class ScriptController extends BaseController {

    // dostarczony interfejs przez bibilioteke
    private final ScriptService scriptService;
    (...)
    @Override
    public void initialize(Service service) {
        service.post(
                "/admin/script/create", 
                this::create);
        service.delete(
                "/admin/script/delete/:id", 
                this::delete);
        service.get(
                "/admin/script/find-by-urlmapping-id/:id", 
                this::findByUrlMappingId);
    }

    private Object create(Request request, Response response) {
        try {

            String body = request.body();
            Class<ScriptWriteDto> classArg = ScriptWriteDto.class;
            ScriptWriteDto dto = gson.fromJson(body, classArg);
            return scriptService.create(dto);

        } catch (Exception ex) {
            ex.printStackTrace();
            response.status(HttpStatus.INTERNAL_SERVER_ERROR_500);
            response.body(ex.getMessage());
            return response;
        }
    }
    (...)
}

// listing 6
    @Override
    public String executeScripts(
            Long urlMappingId,
            String httpRequestContent,
            ScriptType scriptType) throws ScriptServiceException {

        // pobierz z bazy skrypty
        String body = httpRequestContent;
        List<ScriptReadDto> dtos = findByUrlMappingId(urlMappingId)
                .stream()
                .filter(x -> x.getScriptType().equals(scriptType))
                .collect(Collectors.toList());
        
        // zmodyfikuj dane wejsciowe skryptami
        for (ScriptReadDto script : dtos) {
            String content = script.getContent();
            Object skrypt = groovyShell.run(
                    content, 
                    "skrypt", 
                    new String[]{httpRequestContent});
            body = skrypt.toString();
        }
        return body;
    }

// listing 7



// lisitng 8
@RequiredArgsConstructor
class UrlMappingPaneAddController extends BorderPane {

    @FXML
    private Label labelInfo;

    @FXML
    private Button buttonAdd;

    @FXML
    private ComboBox<RequestMethod> comboboxPublishMethod;

    @FXML
    private ComboBox<RequestMethod> comboboxTargetMethod;

    @FXML
    private TextField textfieldPublishURL;

    @FXML
    private TextField textfieldTargetURL;

    private UrlMappingPaneAddModel model;

    private UrlMappingPaneAddModel createNewModel() {
        UrlMappingPaneAddModel newModel = 
                new UrlMappingPaneAddModel();
        
        comboboxTargetMethod.valueProperty()
                .bindBidirectional(newModel.targetMethod);

        textfieldTargetURL.textProperty()
                .bindBidirectional(newModel.targetURL);

        textfieldTargetServer.textProperty()
                .bindBidirectional(newModel.targetServer);

        comboboxPublishMethod.valueProperty()
                .bindBidirectional(newModel.publishMethod);

        textfieldPublishURL.textProperty()
                .bindBidirectional(newModel.publishURL);

        return newModel;
    }
    (...)
    private void onClickButtonAdd(ActionEvent event) {
        (...)
    }
}


@RequiredArgsConstructor
class UrlMappingPaneAddController extends BorderPane {
    (...)
       private void onClickButtonAdd(ActionEvent event) {

        (...)
        // wyslij do serwera dane do zapisu
        UrlMappingWriteDto mappingDto = mapper.apply(model);
        managmentClient.create(mappingDto);
        
        // wyslij sygnal na szyne
        SignalOnly signalOnly = SignalOnly.of(
                ApplicationEventSignal.URL_MAPPING_CREATE);
        eventBus.post(signalOnly);
        
        // wyczysc formularz
        model = createNewModel();
        (...)
    }
    (...)
}

// listing 11
@RequiredArgsConstructor
class UrlMappingPaneEditController extends BorderPane {
    (...)
    @Subscribe
    private void handle(ApplicationEvent event) {
        if (ApplicationEventSignal.URL_MAPPING_CREATE.equals(
                event.getType())) {
            downloadUrlMappingList();
        }
    }
}

// listing 12
class UrlMappingPaneAddController extends BorderPane {

    private UrlMappingClient managmentClient;
    private EventBus eventBus;
    private UrlMappingPaneAddModel model;
    private UrlMappingPaneAddModelToUrlMappingWriteDto mapper;
    (...)
    private void onClickButtonAdd(ActionEvent event) {
        (...)
         // wyslij do serwera dane do zapisu
        UrlMappingWriteDto mappingDto = mapper.apply(model);
        managmentClient.create(mappingDto);

        // wyslij sygnal na szyne
        SignalOnly signalOnly = SignalOnly.of(
                ApplicationEventSignal.URL_MAPPING_CREATE);
        eventBus.post(signalOnly);

        // wyczysc formularz
        model = createNewModel();
        (...)
    }
}